<?php

//include_once DRUPAL_ROOT . '/includes/database/database.inc';
module_load_include('inc', 'yearmanager', 'db');
module_load_include('inc', 'kickoff', 'kickoff');

$GLOBALS['MAX_GROUP_SIZE'] = 9;

function get_person_from_db_row($record)
{
	return array("name" => $record->first_name, "prefs" => ["year" => 1, "hobbies" => explode(',', $record->hobbies_interests)]);
}

function get_person_info_from_db($id, $tableName)
{
	
	//$tablePart = '';
	//if ($mentor) { $tablePart = 'mentor'; } else { $tablePart = 'student'; }
	
	$result = db_query("SELECT * FROM " . $tableName ." WHERE id = :id", array(':id' => $id));
	
	foreach ($result as $record)
	{	
		return get_person_from_db_row($record);
	}
}

function countAvailability($availabilities)
{
	$count = 0;
	foreach ($availabilities as $year => $availability) {if ($availability == 1) { ++$count; } }
	return $count;
}

function getTrioBuckets()
{
	$currentYear = getYear();

	$result = db_select('maestro_matched_trios', 'mmt')
        ->fields('mmt')
        ->condition('mentoring_year', $currentYear, '=')
        ->execute()
        ->fetchAll();
		
	echo $currentYear;
	list($mentor_table_name, $student_table_name) = getParticipantTableNames($currentYear);
// Result is returned as a iterable object that returns a stdClass object on each iteration
	$jsonTrios = null;
	$jsonResult = null;
	
	$people = array();
	
	# Classify trios depending on how many nights they are available on.
	$trioBuckets = array();
	$allNights = null;
	
	foreach ($result as $record)
	{
		$data = $record->trios;
		$jsonResult = json_decode($data, true);
		
		$trioId = 0;
		foreach ($jsonResult as $trio)
		{
			$availability = $trio['kickoff'];
			if ($allNights == null) { $allNights = $availability; }
			$numNightsAvailable = countAvailability($availability);
			if (array_key_exists($numNightsAvailable, $trioBuckets))
			{
				array_push($trioBuckets[$numNightsAvailable], $trio);
			}
			else
			{
				$trioBuckets[$numNightsAvailable] = array();
			}
			//echo $numNightsAvailable;
			
			$trioId++;
		}
		break;
	}
	
	return array($allNights, $trioBuckets);
}

function kickoff_menu()
{
  $items = array();
  

$items['kickoff'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Kickoff Night Group Generator', //page title
    'description' => 'Generates kickoff night groups.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('kickoff_form'), //put the name of the form here
    'access callback' => TRUE
  );
  
  return 

$items;
}
function printTrioBuckets($trioBuckets)
{
	foreach ($trioBuckets as $night => $trios)
	{
		echo $night;
	}
}


function lengthSort($array1, $array2)
{
	/*$count1 = count($array1);
	$count2 = count($array2);
	if ($count1 === $count2) return 0;
	return $count1[0] < $count2[0] ? -1 : 1;*/
	return count($array2) - count($array1);
}

function kickoff_form($form, &$form_state)
{
  //$people = get_data();
 /* $people = array(
	array("name" => "Bill", "trio" => 4, "nights" => [0=>true], "prefs" => ["year" => 1, "hobbies" => ["sports","art"]])
	,array("name" => "Eric", "trio" => 1, "nights" => [2=>true], "prefs" => ["year" => 3, "hobbies" => ["sports","music"]])
	,array("name" => "Ted", "trio" => 3, "nights" => [3=>true], "prefs" => ["year" => 2, "hobbies" => ["fishing","cooking"]])
	,array("name" => "Alvin", "trio" => 2, "nights" => [4=>true], "prefs" => ["year" => 6, "hobbies" => ["sports","art"]])
	//,array("name" => "Alvin2", "prefs" => ["year" => 0])
	//,array("name" => "Alvin3", "prefs" => ["year" => 0])
	);*/
  #echo(count($people) . ' people total. <br />');
  #printGroups(kickoff(1,$people));
  list($allNights, $buckets) = getTrioBuckets();
	printTrioBuckets($buckets);
	
	$bucketsSorted = ksort($buckets);
	
	$arrayLengthHeap = new ArrayLengthHeap();
	foreach ($allNights as $night=>value)
	{
		$a = array();
		$allNights[$night] = $a;
	}
	
	foreach ($bucketsSorted as $nightsAvailable => $trios)
	{
		if ($nightsAvailable == 1)
		{
			foreach ($trios as $trio)
			{
				$nightAvailable = null;
				foreach ($trio->$kickoff as $night=>$available)
				{
					if ($available == 1) { $nightAvailable = $night; break; }
				}
				array_push($allNights[$nightAvailable], $trio);
			}
		}
		else
		{
			foreach ($trios as $trio)
			{
				$nightsAvailable = array();
				foreach ($trio->$kickoff as $night=>$available)
				{
					if ($available == 1) { array_push($nightsAvailable, $night); }
				}
				array_push($allNights[$nightAvailable], $trio);
			}
			usort($allNights, lengthSort);
			reset($allNights);
			$nightWithFewestTrios = current($allNights);
		}
	}
  
  return;
  
  $form['some_text'] = array(
      '#markup' => count($people) . ' people total. <br />' . outputGroups(kickoff(1,$people)));
  
  $form['name'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => "What is Your Name?",
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE, //make this field required 
  );
  
  $form['price'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is Your Price?',
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE, //make this field required 
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Click Here!'),
  );
  
  return $form;
}

function kickoff_form_validate($form, &$form_state)
{
	if (!($form_state['values']['price'] > 0))
	{
		form_set_error('price', t('Price must be a positive number.'));
	}
}

function kickoff_form_submit($form, &$form_state)
{
  $values = $form_state['values'];
  db_insert('dbtng_example')
    ->fields(array('name' => $values['name'], 'price' => $values['price']))
    ->execute();

}
