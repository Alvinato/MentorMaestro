<?php

//include_once DRUPAL_ROOT . '/includes/database/database.inc';
module_load_include('inc', 'yearmanager', 'db');
module_load_include('inc', 'kickoff', 'kickoff');
module_load_include('inc', 'kickoff', 'debug');

$GLOBALS['MAX_GROUP_SIZE'] = 9;

function kickoff_permission() {
    return array(
        'access kickoff' => array(
            'title' => t('Access Kickoff Generator'),
            'description' => t('Allow users to access the Kickoff Generator.'),
            'restrict acces' => TRUE,
            ),
        );
}

function getPersonFromDbRow($record)
{
	return array("name" => $record->first_name,
	"id" => $record->id,
	"prefs" => ["year" => 1,
	"hobbies" => explode(',', $record->hobbies_interests)]);
}

function getPersonInfoFromDb($id, $tableName)
{
	
	//$tablePart = '';
	//if ($mentor) { $tablePart = 'mentor'; } else { $tablePart = 'student'; }
	
	//$result = db_query("SELECT * FROM " . $tableName ." WHERE id = :id", array(':id' => $id));
	$result = db_select($tableName,'mmt')->fields('mmt')->condition('id', $id)->execute()->fetchAll();
	
	foreach ($result as $record)
	{	
		return getPersonFromDbRow($record);
	}
}

function countAvailability($availabilities)
{
	$count = 0;
	foreach ($availabilities as $year => $availability) {if ($availability == 1) { ++$count; } }
	return $count;
}

function getMatchings($year)
{
	$result = db_select('maestro_matched_trios', 'mmt')
        ->fields('mmt',array('id', 'timestamp', 'percentage'))
        ->condition('mentoring_year', $year, '=')
        ->execute()
        ->fetchAll();
		
	$matchings = array();
	$matchings[-1] = "Choose a matching...";
	foreach ($result as $record)
	{
		$matchings[$record->id] = $record->timestamp . " (Percentage: " . $record->percentage. ")";
	}
	
	//error_log('getmatchings: '.print_r($matchings, true));
	return $matchings;
}

function getTrioBuckets($id)
{
	error_log('GTB ID: ' . $id);
	$result = db_select('maestro_matched_trios', 'mmt')
        ->fields('mmt', array('trios'))
        //->condition('mentoring_year', $year, '=')
        ->condition('id', $id, '=')
        ->execute()
        ->fetchAll();
		
	#echo $currentYear;
	list($mentor_table_name, $student_table_name) = getParticipantTableNames($year);
// Result is returned as a iterable object that returns a stdClass object on each iteration
	$jsonTrios = null;
	$jsonResult = null;
	
	$people = array();
	
	# Classify trios depending on how many nights they are available on.
	$trioBuckets = array();
	$allNights = null;
	
	foreach ($result as $record)
	{
		$data = $record->trios;
		$jsonResult = json_decode($data, true);
		//error_log("JSON decode result: " . print_r($jsonResult, true));
		
		$trioId = 0;
		foreach ($jsonResult as $trio)
		{
			$availability = $trio['kickoff'];
			if ($allNights == null) { $allNights = $availability; }
			$numNightsAvailable = countAvailability($availability);
			$trio['id'] = $trioId;
			if (!array_key_exists($numNightsAvailable, $trioBuckets))
			{
				$trioBuckets[$numNightsAvailable] = array();
			}
			array_push($trioBuckets[$numNightsAvailable], $trio);
			//echo $numNightsAvailable;
			
			$trioId++;
		}
		break;
	}
	
	return array($allNights, $trioBuckets);
}

function kickoff_menu()
{
  $items = array();
  

    $items['kickoff'] = array( //this creates a URL that will call this form at "examples/form-example"
        'title' => 'Kickoff Night Group Generator', //page title
        'description' => 'Generates kickoff night groups.',
        'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
        'page arguments' => array('kickoff_form'), //put the name of the form here
        'access arguments' => array('access kickoff'),
    );
  
  return $items;
}

function distributeBucketsIntoNights($allNights, $buckets)
{
	$returnNights = array();
	ksort($buckets);
	
	foreach ($allNights as $night=>$value)
	{
		$returnNights[$night] = array();
	}
	
	foreach ($buckets as $nightsAvailable => $trios)
	{
		if ($nightsAvailable === 1)
		{
			foreach ($trios as $trio)
			{
				$nightAvailable = null;
				foreach ($trio['kickoff'] as $night=>$available)
				{
					if ($available === 1) { $nightAvailable = $night; break; }
				}
				array_push($returnNights[$nightAvailable], $trio);
			}
		}
		else
		{
			foreach ($trios as $trio)
			{
				$nightsAvailable = array();
				foreach ($trio['kickoff'] as $night=>$available)
				{
					if ($available === 1) { $nightsAvailable[$night] = count($returnNights[$night]); }
				}
				
				asort($nightsAvailable);
				reset($nightsAvailable);
				$nightWithFewestTrios = key($nightsAvailable);
				array_push($returnNights[$nightWithFewestTrios], $trio);
			}
			
		}
	}
	
	return $returnNights;
}

function flattenTrios($trios)
{
	$titles = array('mentor','senior','junior');
	$people = array();
	list($mentorTableName, $studentTableName) = getParticipantTableNames(getYear());
	
	foreach ($trios as $trio)
	{
		$x = 0;
		foreach ($titles as $title)
		{
			$keyId = intval($trio[$title]);
			if ($x++ == 0) { $personInfo = getPersonInfoFromDb($keyId, $mentorTableName);
			} else { $personInfo = getPersonInfoFromDb($keyId, $studentTableName); }
			
			$personInfo['trio'] = $trio['id'];
			$personInfo['title'] = $title;
			array_push($people, $personInfo);
		}
		
	}
	
	return $people;
}

function outputAllGroups($allGroups)
{
	$html = '';
	foreach ($allGroups as $night=>$groups)
	{
		$temp = '<div style="float: left; padding-right: 2em;"><h2>Groups for Night ' . $night . '</h2>';
		$temp .= outputGroups($groups);
		$temp .= '</div>';
		$html .= $temp;
	}
	$html .= '<div style="clear: both;">&nbsp;</div>';
	return $html;
}

function ajax_callback($form, $form_state)
{
	//$whichMatching = $form_state['values']['matching'];
	// rebuild whole form with new values
    //$form_state['rebuild'] = true;
	//return $whichMatching . ' ' . outputAllGroups(generateGroups());

	return $form['result'];
}

function generateGroups($currentYear, $id)
{
	list($allNights, $buckets) = getTrioBuckets($id);
	//error_log(print_r($allNights, true));

	$nights = distributeBucketsIntoNights($allNights, $buckets);
	//error_log(print_r($nights, true));
	
	$allGroups = array();
	foreach ($nights as $night=>$trios)
	{
		$people = flattenTrios($trios);
		$groups = kickoff($night,$people);
		//$fixedGroups = fixGroups($groups);
		
		//error_log("GENERATE: " . print_r($groups, true));
		$allGroups[$night] = $groups;
		writeToDatabase($currentYear, $night, $groups);
	}
	
	return $allGroups;
}

$currentYear = 0;

function kickoff_form($form, &$form_state)
{
	//$people = get_data();
	 /*$people = array(
	array("name" => "Bill", "trio" => 4, "title"=>"mentor", "nights" => [0=>true], "prefs" => ["year" => 1, "hobbies" => ["sports","art"]])
	,array("name" => "Eric", "trio" => 1, "title"=>"mentor", "nights" => [2=>true], "prefs" => ["year" => 3, "hobbies" => ["sports","music"]])
	,array("name" => "Ted", "trio" => 3, "title"=>"mentor", "nights" => [3=>true], "prefs" => ["year" => 2, "hobbies" => ["fishing","cooking"]])
	,array("name" => "Alvin", "trio" => 2, "title"=>"mentor", "nights" => [4=>true], "prefs" => ["year" => 6, "hobbies" => ["sports","art"]])
	//,array("name" => "Alvin2", "prefs" => ["year" => 0])
	//,array("name" => "Alvin3", "prefs" => ["year" => 0])
	);
	$groups = kickoff(1, $people);*/
	#echo(count($people) . ' people total. <br />');
	#printGroups(kickoff(1,$people));
	
	$currentYear = getYear();
	$matchings = getMatchings($currentYear);
	//array_unshift($matchings, "Choose a matching...");
	//error_log('kickoffformm '.print_r($matchings, true));
	
	$form['matching'] = array(
		'#type' => 'select',
		'#options' => $matchings,
		'#title' => t('Matching:'),
		
		'#ajax' => array(
			'callback' => 'ajax_callback',
			'wrapper' => 'result_div'
		)
	);
	
	/*$form['blah'] = array(
		'#type' => 'button',
		'#value' => 'Generate',
		'#ajax' => array(
			'callback' => 'ajax_callback',
			'wrapper' => 'result_div'
		)
	);*/
	
	$content = '';
	
	if (array_key_exists('values', $form_state))
	{
		$whichMatching = $form_state['values']['matching'];
		if ($whichMatching != -1)
		{
			$content = outputAllGroups(generateGroups($currentYear, $whichMatching));
		}
	}
	
	
	//error_log('CONTENT: ' . $content);
	
	$form['result'] = array(
	  '#prefix' => '<div id="result_div">',
	  '#markup' => $content,
	  '#suffix' => '</div>'
	  );
  
	/*$form['some_text'] = array(
	  '#markup' =>
	  count($people) . ' people total. <br />' . outputAllGroups($allGroups)
	  );*/

	return $form;
}

function kickoff_form_validate($form, &$form_state)
{
	if (!($form_state['values']['price'] > 0))
	{
		form_set_error('price', t('Price must be a positive number.'));
	}
}

function writeToDatabase($year, $night, $groups)
{
	$jsonGroups = array();
	foreach ($groups as $group)
	{
		$json = array();
		for ($x = 0; $x < 3; ++$x)
		{
			$json[getTitleFromId($x)] = $group->getPersonIds($x);
		}
		array_push($jsonGroups, $json);
	}
	
	$jsonStringGroups = json_encode($jsonGroups);

	$nightFiltered = str_replace(', ', '-', $night);
	$nightFiltered = str_replace(' ', '-', $nightFiltered);
	
	db_insert('maestro_matched_kickoff_groups')
	->fields(array('timestamp' => date('Y-m-d H:i:s'),
	'mentoring_year' => $year, 'kickoff_night' => $nightFiltered
	, 'groups' => $jsonStringGroups))
	->execute();
}

function kickoff_form_submit($form, &$form_state)
{
	$values = $form_state['values'];
	db_insert('dbtng_example')
	->fields(array('name' => $values['name'], 'price' => $values['price']))
	->execute();
}
